-- this query is to create table of all yellow taxi tripdata in first half of 2024
CREATE OR REPLACE TABLE `GCP_PROJECT_ID.GCP_DATASET.YELLOW_TRIPDATA_2024`
(
  unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
  filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),      
  VendorID NUMERIC OPTIONS (description = 'A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.'),
  tpep_pickup_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was engaged'),
  tpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was disengaged'),
  passenger_count FLOAT64 OPTIONS (description = 'The number of passengers in the vehicle. This is a driver-entered value.'),
  trip_distance FLOAT64 OPTIONS (description = 'The elapsed trip distance in miles reported by the taximeter.'),
  RatecodeID FLOAT64 OPTIONS (description = 'The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride'),
  store_and_fwd_flag STRING OPTIONS (description = 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. TRUE = store and forward trip, FALSE = not a store and forward trip'),
  PULocationID INTEGER OPTIONS (description = 'TLC Taxi Zone in which the taximeter was engaged'),
  DOLocationID INTEGER OPTIONS (description = 'TLC Taxi Zone in which the taximeter was disengaged'),
  payment_type INTEGER OPTIONS (description = 'A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip'),
  fare_amount FLOAT64 OPTIONS (description = 'The time-and-distance fare calculated by the meter'),
  extra FLOAT64 OPTIONS (description = 'Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges'),
  mta_tax FLOAT64 OPTIONS (description = '$0.50 MTA tax that is automatically triggered based on the metered rate in use'),
  tip_amount FLOAT64 OPTIONS (description = 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
  tolls_amount FLOAT64 OPTIONS (description = 'Total amount of all tolls paid in trip.'),
  improvement_surcharge FLOAT64 OPTIONS (description = '$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.'),
  total_amount FLOAT64 OPTIONS (description = 'The total amount charged to passengers. Does not include cash tips.'),
  congestion_surcharge FLOAT64 OPTIONS (description = 'Congestion surcharge applied to trips in congested zones'),
  airport_fee FLOAT64 OPTIONS (description='For pick up only at LaGuardia and John F. Kennedy Airports')
);

-- create external table to load data from Google Cloud Storage into BigQuery
LOAD DATA OVERWRITE `GCP_PROJECT_ID.GCP_DATASET.YELLOW_TRIPDATA_2024_MONTH_EXT`
FROM FILES (
  format = 'PARQUET',
  uris = ['gs://BUCKET_NAME/YELLOW_TRIPDATA_2024_MONTH.PARQUET']);

-- create new table after adding additional data column
CREATE OR REPLACE TABLE `GCP_PROJECT_ID.GCP_DATASET.YELLOW_TRIPDATA_2024_MONTH`
AS
SELECT
  MD5(CONCAT(
    COALESCE(CAST(vendor_id AS STRING), ""),
    COALESCE(CAST(tpep_pickup_datetime AS STRING), ""),
    COALESCE(CAST(tpep_dropoff_datetime AS STRING), ""),
    COALESCE(CAST(pu_location_id AS STRING), ""),
    COALESCE(CAST(do_location_id AS STRING), "")
  )) AS unique_row_id,
  "YELLOW_TRIPDATA_2024_MONTH.PARQUET" AS filename,
  *
FROM `GCP_PROJECT_ID.GCP_DATASET.YELLOW_TRIPDATA_2024_MONTH_EXT`;

-- merge data into main table after transformation
MERGE INTO `GCP_PROJECT_ID.GCP_DATASET.YELLOW_TRIPDATA_2024` T
  USING `GCP_PROJECT_ID.GCP_DATASET.YELLOW_TRIPDATA_2024_MONTH` S
  ON T.unique_row_id = S.unique_row_id
  WHEN NOT MATCHED THEN
    INSERT (unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount, congestion_surcharge, airport_fee)
    VALUES (S.unique_row_id, S.filename, S.vendor_id, S.tpep_pickup_datetime, S.tpep_dropoff_datetime, S.passenger_count, S.trip_distance, S.ratecode_id, S.store_and_fwd_flag, S.pu_location_id, S.do_location_id, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.improvement_surcharge, S.total_amount, S.congestion_surcharge, S.airport_fee);
