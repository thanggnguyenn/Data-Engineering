id: gcp_yellow_taxi
namespace: zoomcamp
description: This flow is to create yellow taxi trip data table from January to June of 2024

variables:
  file: "{{inputs.taxi}}_tripdata_{{inputs.year}}-{{inputs.month}}.csv"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('GCP_DATASET')}}.{{inputs.taxi}}_tripdata_{{inputs.year}}_{{inputs.month}}"
  data: "{{outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ inputs.year ~ '-' ~ inputs.month ~ '.csv']}}"

tasks:
  - id: bq_yellow_tripdata
    type: io.kestra.plugin.gcp.bigquery.Query
    description: create table of all yellow taxi tripdata in first half of 2024 using Kestra
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata_2024_kestra`
      (
        unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
        filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),      
        VendorID NUMERIC OPTIONS (description = 'A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.'),
        tpep_pickup_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was engaged'),
        tpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was disengaged'),
        passenger_count FLOAT64 OPTIONS (description = 'The number of passengers in the vehicle. This is a driver-entered value.'),
        trip_distance FLOAT64 OPTIONS (description = 'The elapsed trip distance in miles reported by the taximeter.'),
        RatecodeID FLOAT64 OPTIONS (description = 'The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride'),
        store_and_fwd_flag STRING OPTIONS (description = 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. TRUE = store and forward trip, FALSE = not a store and forward trip'),
        PULocationID INTEGER OPTIONS (description = 'TLC Taxi Zone in which the taximeter was engaged'),
        DOLocationID INTEGER OPTIONS (description = 'TLC Taxi Zone in which the taximeter was disengaged'),
        payment_type INTEGER OPTIONS (description = 'A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip'),
        fare_amount FLOAT64 OPTIONS (description = 'The time-and-distance fare calculated by the meter'),
        extra FLOAT64 OPTIONS (description = 'Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges'),
        mta_tax FLOAT64 OPTIONS (description = '$0.50 MTA tax that is automatically triggered based on the metered rate in use'),
        tip_amount FLOAT64 OPTIONS (description = 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
        tolls_amount FLOAT64 OPTIONS (description = 'Total amount of all tolls paid in trip.'),
        improvement_surcharge FLOAT64 OPTIONS (description = '$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.'),
        total_amount FLOAT64 OPTIONS (description = 'The total amount charged to passengers. Does not include cash tips.'),
        congestion_surcharge FLOAT64 OPTIONS (description = 'Congestion surcharge applied to trips in congested zones'),
        airport_fee FLOAT64 OPTIONS (description='For pick up only at LaGuardia and John F. Kennedy Airports')
      );

  - id: create_ext_table_for_each_month
    type: io.kestra.plugin.core.flow.ForEach
    values: ["01", "02", "03", "04", "05", "06"]
    tasks:
      - id: bq_yellow_table_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        description: -- create external table to load data from Google Cloud Storage into BigQuery
        sql: |
          LOAD DATA OVERWRITE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata_2024_{{ taskrun.value }}_ext_kestra`
          FROM FILES (
            format = 'PARQUET',
            uris = ['gs://{{kv('GCP_BUCKET_NAME')}}/yellow_tripdata_2024_{{taskrun.value}}_parquet.parquet']
          );

  - id: add_cols_table_for_each_month
    type: io.kestra.plugin.core.flow.ForEach
    values: ["01", "02", "03", "04", "05", "06"]
    tasks:
      - id: bq_yellow_table_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        description: -- create new table after adding additional data column
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata_2024_{{ taskrun.value }}_kestra`
          AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(vendor_id AS STRING), ""),
              COALESCE(CAST(tpep_pickup_datetime AS STRING), ""),
              COALESCE(CAST(tpep_dropoff_datetime AS STRING), ""),
              COALESCE(CAST(pu_location_id AS STRING), ""),
              COALESCE(CAST(do_location_id AS STRING), "")
            )) AS unique_row_id,
            "yellow_tripdata_2024_{{ taskrun.value }}_parquet" AS filename,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata_2024_{{ taskrun.value }}_ext_kestra`;

  - id: merge_table_for_each_month
    type: io.kestra.plugin.core.flow.ForEach
    values: ["01", "02", "03", "04", "05", "06"]
    tasks:
      - id: bq_yellow_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata_2024_kestra` T
          USING `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata_2024_{{ taskrun.value }}_kestra` S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount, congestion_surcharge, airport_fee)
            VALUES (S.unique_row_id, S.filename, S.vendor_id, S.tpep_pickup_datetime, S.tpep_dropoff_datetime, S.passenger_count, S.trip_distance, S.ratecode_id, S.store_and_fwd_flag, S.pu_location_id, S.do_location_id, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.improvement_surcharge, S.total_amount, S.congestion_surcharge, S.airport_fee);

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"
